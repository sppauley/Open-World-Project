[
    {
        "name": "Forge_Calculate",
        "trigger": null,
        "level_nid": null,
        "condition": "True",
        "commands": [],
        "only_once": false,
        "priority": 20,
        "_source": [
            "# checks to see what the component is; edits forge parameters as needed",
            "# get ready for the ugliest elif chain of all time",
            "# Kevin, if you're reading this, I'm so sorry",
            "if;'Triangle' in '{v:ForgeType}'",
            "level_var;ForgeComponent;'double_triangle'",
            "level_var;MaterialReference;'TriangleWeaponMaterial'",
            "#level_var;ForgeAmount",
            "elif;'Damage' in '{v:ForgeType}'",
            "level_var;ForgeComponent;'damage'",
            "level_var;MaterialReference;'DamageWeaponMaterial'",
            "level_var;ForgeAmount;1",
            "elif;'Stagger' in '{v:ForgeType}'",
            "level_var;ForgeComponent;'stagger'",
            "level_var;MaterialReference;'StaggerWeaponMaterial'",
            "level_var;ForgeAmount;1",
            "elif;'Accuracy' in '{v:ForgeType}'",
            "level_var;ForgeComponent;'hit'",
            "level_var;MaterialReference;'AccuracyWeaponMaterial'",
            "level_var;ForgeAmount;5",
            "end",
            "# checks to see if the item already contains the component",
            "# if not, forge cost set to base; if so, calculates cost on difference between base",
            "if;game.level_vars['ForgeComponent'] not in [component.nid for component in [item for item in game.get_unit('{v:ForgeUnit}').items if item.nid == '{v:ForgeItem}'][0].components]",
            "level_var;ForgeCost;1",
            "level_var;NewComponent;1",
            "else",
            "level_var;ForgeCost;{eval:[component.value for component in [item for item in game.get_unit('{v:ForgeUnit}').items if item.uid == {v:ForgeItem}][0].components if component.nid == game.level_vars['ForgeComponent']][0]//game.level_vars['ForgeAmount'] + 1 - [component.value for component in [item for item in game.get_unit('Blacksmith').items if item.uid == {v:ForgeItem}][0].components if component.nid == game.level_vars['ForgeComponent']][0]//game.level_vars['ForgeAmount']}",
            "level_var;NewComponent;0",
            "end",
            "# checks to see if you can afford the forge",
            "if;game.level_vars['ForgeCost']<=game.game_vars[game.level_vars['MaterialReference']]",
            "# checks to see item has requirements",
            "if;[component.value for component in [item for item in game.get_unit('{v:ForgeUnit}').items if item.uid == {v:ForgeItem}][0].components if component.nid == 'stat_req']",
            "# checks to see if the primary requirement is met if increased",
            "level_var;ForgeReq;[component.value for component in [item for item in game.get_unit('{v:ForgeUnit}').items if item.uid == {v:ForgeItem}][0].components if component.nid == 'stat_req'][0][0][0]",
            "level_var;ReqValue;[component.value for component in [item for item in game.get_unit('{v:ForgeUnit}').items if item.uid == {v:ForgeItem}][0].components if component.nid == 'stat_req'][0][0][1]",
            "if;game.get_unit('{v:ForgeUnit}').get_stat(game.level_vars['ForgeReq']) > game.level_vars['ReqValue']",
            "modify_item_component;{v:ForgeUnit};{v:ForgeItem};stat_req;[[game.level_vars['ForgeReq'],game.level_vars['ReqValue']+1]]",
            "trigger_script;Forge_End",
            "else",
            "sound;Error",
            "alert;Wouldn't meet stat requirements",
            "trigger_script;Forge_PickMaterial",
            "end",
            "else",
            "trigger_script;Forge_End",
            "end",
            "else",
            "sound;Error",
            "alert;Can't afford",
            "trigger_script;Forge_PickMaterial",
            "end"
        ]
    }
]