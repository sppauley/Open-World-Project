[
    {
        "name": "Unforge_End",
        "trigger": null,
        "level_nid": null,
        "condition": "True",
        "commands": [],
        "only_once": false,
        "priority": 20,
        "_source": [
            "alert;Forge refunded!",
            "",
            "# loops through the forging changes and refunds everything (refunds materials, alters component)",
            "for;CHANGE;{v:ForgeChanges}",
            "    # for additive components, just removes the component and refunds the material",
            "    if;{CHANGE}[1] == True",
            "        remove_item_component;{v:ForgeUnit};{v:ForgeNID};{d:ForgingTable.{eval:{CHANGE}[0].replace('WeaponMaterial','')}.component_name}",
            "        # changes the description if needed",
            "        if;'{d:ForgingTable.{eval:{CHANGE}[0].replace('WeaponMaterial','')}.desc}' in [item.desc for item in game.get_unit('{v:ForgeUnit}').items if item.nid == '{v:ForgeNID}'][0]",
            "            change_item_desc;{v:ForgeUnit};{v:ForgeNID};[item.desc for item in game.get_unit('{v:ForgeUnit}').items if item.nid == '{v:ForgeNID}'][0].replace(' {d:ForgingTable.{eval:{CHANGE}[0].replace('WeaponMaterial','')}.desc}', '')",
            "        end",
            "        inc_game_var;{eval:{CHANGE}[0]};1",
            "        alert;{eval: 'Gained 1 '+{CHANGE}[0].replace('WeaponMaterial','')+' material'}",
            "        level_var;ForgeReq;[component.value for component in [item for item in game.get_unit('{v:ForgeUnit}').items if item.uid == {v:ForgeItem}][0].components if component.nid == 'stat_req'][0][0][0]",
            "        level_var;ReqValue;[component.value for component in [item for item in game.get_unit('{v:ForgeUnit}').items if item.uid == {v:ForgeItem}][0].components if component.nid == 'stat_req'][0][0][1]",
            "        if;len([component.value for component in [item for item in game.get_unit('{v:ForgeUnit}').items if item.uid == {v:ForgeItem}][0].components if component.nid == 'stat_req'][0])==1",
            "            modify_item_component;{v:ForgeUnit};{v:ForgeItem};stat_req;[[game.level_vars['ForgeReq'],game.level_vars['ReqValue']-1]]",
            "        else",
            "        # if there's more than one component, preserve the second one while increasing the first",
            "            modify_item_component;{v:ForgeUnit};{v:ForgeItem};stat_req;[[game.level_vars['ForgeReq'],game.level_vars['ReqValue']-1],[component.value for component in [item for item in game.get_unit('{v:ForgeUnit}').items if item.uid == {v:ForgeItem}][0].components if component.nid == 'stat_req'][0][1]]",
            "        end",
            "    # otherwise, uses Amount to account for the refund and component change",
            "    else",
            "        modify_item_component;{v:ForgeUnit};{v:ForgeNID};{d:ForgingTable.{eval:{CHANGE}[0].replace('WeaponMaterial','')}.component_name};[component.value for component in [item for item in game.get_unit('Blacksmith').items if item.nid == '{v:ForgeNID}'][0].components if component.nid == '{d:ForgingTable.{eval:{CHANGE}[0].replace('WeaponMaterial','')}.component_name}'][0]",
            "        level_var;RefundAmount;0",
            "        for;NUM;range(1,{CHANGE}[1]+1)",
            "            inc_level_var;RefundAmount;{NUM}",
            "        endf",
            "        inc_game_var;{eval:{CHANGE}[0]};{v:RefundAmount}",
            "        alert;{eval: 'Gained ' + '{v:RefundAmount}' + ' '+ {CHANGE}[0].replace('WeaponMaterial','')+' material'}",
            "        level_var;ForgeReq;[component.value for component in [item for item in game.get_unit('{v:ForgeUnit}').items if item.uid == {v:ForgeItem}][0].components if component.nid == 'stat_req'][0][0][0]",
            "        level_var;ReqValue;[component.value for component in [item for item in game.get_unit('{v:ForgeUnit}').items if item.uid == {v:ForgeItem}][0].components if component.nid == 'stat_req'][0][0][1]",
            "        if;len([component.value for component in [item for item in game.get_unit('{v:ForgeUnit}').items if item.uid == {v:ForgeItem}][0].components if component.nid == 'stat_req'][0])==1",
            "            modify_item_component;{v:ForgeUnit};{v:ForgeItem};stat_req;[[game.level_vars['ForgeReq'],game.level_vars['ReqValue']-{CHANGE}[1]]]",
            "        else",
            "        # if there's more than one component, preserve the second one while increasing the first",
            "            modify_item_component;{v:ForgeUnit};{v:ForgeItem};stat_req;[[game.level_vars['ForgeReq'],game.level_vars['ReqValue']-{CHANGE}[1]],[component.value for component in [item for item in game.get_unit('{v:ForgeUnit}').items if item.uid == {v:ForgeItem}][0].components if component.nid == 'stat_req'][0][1]]",
            "        end",
            "    end",
            "endf",
            "",
            "remove_item;Blacksmith;{v:ForgeNID};no_banner",
            "give_money;-150;Simon",
            "trigger_script;Unforge_PickUnit"
        ]
    }
]