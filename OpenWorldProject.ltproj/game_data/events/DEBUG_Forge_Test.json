[
    {
        "name": "Forge Test",
        "trigger": "unit_wait",
        "level_nid": "DEBUG",
        "condition": "True",
        "commands": [
            [
                "comment",
                [
                    "# sets up unit to forge for, saves to var ForgeUnit"
                ]
            ],
            [
                "choice",
                [
                    "ForgeUnit",
                    "Choose a unit to forge for:",
                    "{eval:','.join([unit.nid for unit in game.get_units_in_party()])}",
                    "64",
                    "v",
                    "top_left",
                    "menu_bg_base (menu_bg_base)",
                    "",
                    "type_unit",
                    "8,3",
                    "left",
                    "FLAG(backable)"
                ]
            ],
            [
                "comment",
                [
                    "# sets up the item to forge"
                ]
            ],
            [
                "choice",
                [
                    "ForgeItem",
                    "Choose an item:",
                    "{eval:','.join(item.nid for item in game.get_unit('{v:ForgeUnit}').items)}",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "type_game_item",
                    "FLAG(backable)"
                ]
            ],
            [
                "comment",
                [
                    "# gives a default version of the item to the blacksmith for comparison"
                ]
            ],
            [
                "give_item",
                [
                    "Blacksmith",
                    "{v:ForgeItem}",
                    "FLAG(no_banner)"
                ]
            ],
            [
                "comment",
                [
                    "# component selections"
                ]
            ],
            [
                "choice",
                [
                    "ForgeType",
                    "Choose a material:",
                    "{eval:','.join([str(var).replace('Material','')+' ('+str(game.game_vars[var])+')' for var in game.game_vars if 'Material' in var])}",
                    "FLAG(backable)"
                ]
            ],
            [
                "comment",
                [
                    "# checks to see what the component is; edits forge parameters as needed"
                ]
            ],
            [
                "comment",
                [
                    "# get ready for the ugliest elif chain of all time"
                ]
            ],
            [
                "comment",
                [
                    "# Kevin, if you're reading this, I'm so sorry"
                ]
            ],
            [
                "if",
                [
                    "'Triangle' in '{v:ForgeType}'"
                ]
            ],
            [
                "level_var",
                [
                    "ForgeComponent",
                    "'double_triangle'"
                ]
            ],
            [
                "level_var",
                [
                    "MaterialReference",
                    "'TriangleMaterial'"
                ]
            ],
            [
                "comment",
                [
                    "#level_var;ForgeAmount"
                ]
            ],
            [
                "elif",
                [
                    "'Damage' in '{v:ForgeType}'"
                ]
            ],
            [
                "level_var",
                [
                    "ForgeComponent",
                    "'damage'"
                ]
            ],
            [
                "level_var",
                [
                    "MaterialReference",
                    "'DamageMaterial'"
                ]
            ],
            [
                "level_var",
                [
                    "ForgeAmount",
                    "1"
                ]
            ],
            [
                "elif",
                [
                    "'Stagger' in '{v:ForgeType}'"
                ]
            ],
            [
                "level_var",
                [
                    "ForgeComponent",
                    "'stagger'"
                ]
            ],
            [
                "level_var",
                [
                    "MaterialReference",
                    "'StaggerMaterial'"
                ]
            ],
            [
                "level_var",
                [
                    "ForgeAmount",
                    "1"
                ]
            ],
            [
                "elif",
                [
                    "'Hit' in '{v:ForgeType}'"
                ]
            ],
            [
                "level_var",
                [
                    "ForgeComponent",
                    "'hit'"
                ]
            ],
            [
                "level_var",
                [
                    "MaterialReference",
                    "'AccuracyMaterial'"
                ]
            ],
            [
                "level_var",
                [
                    "ForgeAmount",
                    "5"
                ]
            ],
            [
                "end",
                []
            ],
            [
                "comment",
                [
                    "# checks to see if the item already contains the component"
                ]
            ],
            [
                "comment",
                [
                    "# if not, forge cost set to base; if so, calculates cost on difference between base"
                ]
            ],
            [
                "if",
                [
                    "game.level_vars['ForgeComponent'] not in [component.nid for component in [item for item in game.get_unit('{v:ForgeUnit}').items if item.nid == '{v:ForgeItem}'][0].components]"
                ]
            ],
            [
                "level_var",
                [
                    "ForgeCost",
                    "1"
                ]
            ],
            [
                "level_var",
                [
                    "NewComponent",
                    "1"
                ]
            ],
            [
                "else",
                []
            ],
            [
                "level_var",
                [
                    "ForgeCost",
                    "{eval:[component.value for component in [item for item in game.get_unit('{v:ForgeUnit}').items if item.nid == '{v:ForgeItem}'][0].components if component.nid == game.level_vars['ForgeComponent']][0] + 1 - [component.value for component in [item for item in game.get_unit('Blacksmith').items if item.nid == '{v:ForgeItem}'][0].components if component.nid == game.level_vars['ForgeComponent']][0]}"
                ]
            ],
            [
                "level_var",
                [
                    "NewComponent",
                    "0"
                ]
            ],
            [
                "end",
                []
            ],
            [
                "comment",
                [
                    "# checks to see if you can afford the forge"
                ]
            ],
            [
                "if",
                [
                    "game.level_vars['ForgeCost']<=game.game_vars[game.level_vars['MaterialReference']]"
                ]
            ],
            [
                "inc_game_var",
                [
                    "{eval:game.level_vars['MaterialReference']}",
                    "-game.level_vars['ForgeCost']"
                ]
            ],
            [
                "alert",
                [
                    "Forge completed!"
                ]
            ],
            [
                "if",
                [
                    "game.level_vars['NewComponent']==0"
                ]
            ],
            [
                "modify_item_component",
                [
                    "{v:ForgeUnit}",
                    "{v:ForgeItem}",
                    "{eval:game.level_vars['ForgeComponent']}",
                    "game.level_vars['ForgeAmount']",
                    "FLAG(additive)"
                ]
            ],
            [
                "else",
                []
            ],
            [
                "add_item_component",
                [
                    "{v:ForgeUnit}",
                    "{v:ForgeItem}",
                    "{eval:game.level_vars['ForgeComponent']}",
                    "game.level_vars['ForgeAmount']"
                ]
            ],
            [
                "comment",
                [
                    "# some new components add non-stat changes. Updates the description to compensate."
                ]
            ],
            [
                "if",
                [
                    "game.level_vars['ForgeComponent']=='double_triangle'"
                ]
            ],
            [
                "change_item_desc",
                [
                    "{v:ForgeUnit}",
                    "{v:ForgeItem}",
                    "{eval:[item.desc for item in game.get_unit('{v:ForgeUnit}').items if item.nid == '{v:ForgeItem}'][0] +'Doubles weapon triangle.'}"
                ]
            ],
            [
                "end",
                []
            ],
            [
                "end",
                []
            ],
            [
                "else",
                []
            ],
            [
                "alert",
                [
                    "Can't afford"
                ]
            ],
            [
                "end",
                []
            ]
        ],
        "only_once": false,
        "priority": 20
    }
]